# src/demo/demo_scenarios.py
class TinyARIADemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è TinyARIA"""
    
    def __init__(self, aria_instance):
        self.aria = aria_instance
        
    def run_greeting_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        
        print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π ===\n")
        
        greetings = [
            "–ü—Ä–∏–≤–µ—Ç!",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫–∞–∫ –¥–µ–ª–∞?",
            "Hello there!",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞."
        ]
        
        pipeline = CognitivePipeline(self.aria.layers)
        
        for greeting in greetings:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {greeting}")
            
            result = pipeline.process_input(greeting)
            
            print(f"ARIA: {result['response']}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if 'layer_results' in result and 'perception' in result['layer_results']:
                perception = result['layer_results']['perception']
                if 'context_analysis' in perception:
                    intent = perception['context_analysis'].primary_intent
                    emotion = perception['context_analysis'].emotional_tone
                    print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent}")
                    print(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: {emotion}")
                    
            print("-" * 50)
            
    def run_memory_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏"""
        
        print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏ ===\n")
        
        pipeline = CognitivePipeline(self.aria.layers)
        session_manager = SessionManager()
        session_id = "demo_memory_session"
        
        conversation = [
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–∏—è.",
            "–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º.",
            "–ú–æ—ë —Ö–æ–±–±–∏ - —á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –ø–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–µ.",
            "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
            "–ö–∞–∫–∞—è —É –º–µ–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?",
            "–ß—Ç–æ —è —á–∏—Ç–∞—é –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?"
        ]
        
        session_context = session_manager.get_session(session_id)
        
        for i, user_input in enumerate(conversation):
            print(f"–®–∞–≥ {i+1}")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}")
            
            result = pipeline.process_input(user_input, session_context)
            
            print(f"ARIA: {result['response']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            session_manager.update_session(session_id, result['context_updates'])
            session_manager.add_to_conversation_history(
                session_id, user_input, result['response']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            session_context = session_manager.get_session(session_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
            if 'layer_results' in result and 'memory' in result['layer_results']:
                memory_result = result['layer_results']['memory']
                working_memory = memory_result.get('working_memory_context', [])
                print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–±–æ—á–µ–π –ø–∞–º—è—Ç–∏: {len(working_memory)}")
                
                if i >= 3:  # –ù–∞—á–∏–Ω–∞—è —Å 4-–≥–æ —à–∞–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    relevant_memories = memory_result.get('relevant_memories', [])
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(relevant_memories)}")
                    
            print("-" * 50)
            
    def run_reasoning_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
        
        print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π ===\n")
        
        pipeline = CognitivePipeline(self.aria.layers)
        
        reasoning_tasks = [
            "–ï—Å–ª–∏ –≤—Å–µ –∫–æ—à–∫–∏ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ, –∞ –ú—É—Ä–∫–∞ - –∫–æ—à–∫–∞, —Ç–æ —á—Ç–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –æ –ú—É—Ä–∫–µ?",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å 10 —è–±–ª–æ–∫. –Ø —Å—ä–µ–ª 3 –∏ –¥–∞–ª 2 –¥—Ä—É–≥—É. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ —É –º–µ–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å?",
            "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –∫–Ω–∏–≥–æ–π –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º?",
            "–ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Ç–æ –∫–∞–∫–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è?"
        ]
        
        for task in reasoning_tasks:
            print(f"–ó–∞–¥–∞—á–∞: {task}")
            
            result = pipeline.process_input(task)
            
            print(f"–†–µ—à–µ–Ω–∏–µ ARIA: {result['response']}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if 'layer_results' in result and 'reasoning' in result['layer_results']:
                reasoning_result = result['layer_results']['reasoning']
                steps = reasoning_result.get('reasoning_steps', [])
                if steps:
                    print("–®–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:")
                    for i, step in enumerate(steps[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —à–∞–≥–∞
                        print(f"  {i+1}. {step}")
                        
            print("-" * 50)
            
    def run_ethics_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
        
        print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π ===\n")
        
        pipeline = CognitivePipeline(self.aria.layers)
        
        ethical_scenarios = [
            "–°—Ç–æ–∏—Ç –ª–∏ —Å–æ–ª–≥–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–∞?",
            "–ú–æ–∂–µ—à—å –ª–∏ —Ç—ã –ø–æ–º–æ—á—å –º–Ω–µ –≤–∑–ª–æ–º–∞—Ç—å —á—É–∂–æ–π –∞–∫–∫–∞—É–Ω—Ç?",
            "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –∫—Ç–æ-—Ç–æ –æ–±–∏–∂–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ?",
            "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ–º–±—É."
        ]
        
        for scenario in ethical_scenarios:
            print(f"–≠—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: {scenario}")
            
            result = pipeline.process_input(scenario)
            
            print(f"–û—Ç–≤–µ—Ç ARIA: {result['response']}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if 'layer_results' in result and 'ethics' in result['layer_results']:
                ethics_result = result['layer_results']['ethics']
                if 'ethical_evaluation' in ethics_result:
                    eval_result = ethics_result['ethical_evaluation']
                    if eval_result.get('blocked', False):
                        print("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º")
                    print(f"–≠—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞: {eval_result.get('overall_score', 'N/A')}")
                    
            print("-" * 50)
            
    def run_metacognition_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"""
        
        print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ü–∏–∏ ===\n")
        
        pipeline = CognitivePipeline(self.aria.layers)
        
        metacognitive_questions = [
            "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö?",
            "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ —Å–≤–æ—ë–º –º—ã—à–ª–µ–Ω–∏–∏?",
            "–í —á–µ–º —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
            "–ö–∞–∫ —Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è?",
            "–ú–æ–∂–µ—à—å –ª–∏ —Ç—ã –æ—à–∏–±–∞—Ç—å—Å—è?"
        ]
        
        for question in metacognitive_questions:
            print(f"–í–æ–ø—Ä–æ—Å –æ –º—ã—à–ª–µ–Ω–∏–∏: {question}")
            
            result = pipeline.process_input(question)
            
            print(f"–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ ARIA: {result['response']}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ: {result['confidence']:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'layer_results' in result and 'metacognition' in result['layer_results']:
                meta_result = result['layer_results']['metacognition']
                if 'self_assessment' in meta_result:
                    assessment = meta_result['self_assessment']
                    print(f"–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π: {assessment.get('capability_score', 'N/A')}")
                    
            print("-" * 50)
            
    def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        print("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é TinyARIA!")
        print("–≠—Ç–æ—Ç –¥–µ–º–æ –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.\n")
        
        demos = [
            ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —ç–º–æ—Ü–∏–∏", self.run_greeting_demo),
            ("–†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é", self.run_memory_demo),
            ("–õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è", self.run_reasoning_demo),
            ("–≠—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–∂–¥–µ–Ω–∏—è", self.run_ethics_demo),
            ("–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ (–º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ü–∏—è)", self.run_metacognition_demo)
        ]
        
        for demo_name, demo_func in demos:
            print(f"\n{'='*60}")
            print(f"üîç {demo_name}")
            print(f"{'='*60}")
            
            try:
                demo_func()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ '{demo_name}': {e}")
                
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É TinyARIA!")